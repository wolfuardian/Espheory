//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Players/MainControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MainControl: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MainControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MainControl"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""515def80-2939-46f8-b09d-128827227315"",
            ""actions"": [
                {
                    ""name"": ""PitchYawDelta"",
                    ""type"": ""Value"",
                    ""id"": ""1cd3710e-cddd-4658-8aa7-b588312d9f45"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""NextDollyLevel"",
                    ""type"": ""Button"",
                    ""id"": ""81584ec2-45f3-4c22-b9fb-db1291d93b27"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dodge"",
                    ""type"": ""Button"",
                    ""id"": ""feb33151-4e42-46be-96f8-3bab332eb5ff"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""21d42863-b3a8-47fb-ba24-cb046d5893ee"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TurnAround"",
                    ""type"": ""Button"",
                    ""id"": ""823ccb02-ad9e-4b1c-bfe7-80bbd825ebfb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LockOnTarget"",
                    ""type"": ""Button"",
                    ""id"": ""e5c963f3-a1b5-427d-b756-f36c1c35009c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UnlockTarget"",
                    ""type"": ""Button"",
                    ""id"": ""d71bd470-e01b-4590-ba8d-b90e232cfdff"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NextTarget"",
                    ""type"": ""Button"",
                    ""id"": ""ef29aae0-92e1-4bf8-9d64-368c4f495358"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PrevTarget"",
                    ""type"": ""Button"",
                    ""id"": ""7dd01b23-9cf6-443c-91db-fcdf6fc0f641"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""b7bd135a-3b76-4a7f-af40-dfcc0319a2db"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PitchYawDelta"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Modifier"",
                    ""id"": ""9ff76eb4-b565-42e7-8ee2-fe34ba126e2d"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""PitchYawDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Binding"",
                    ""id"": ""b97085a9-3988-41f5-a6f6-e0cada710d0e"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""PitchYawDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""90d40fb3-392b-4e7f-a971-dd62e7d02625"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""NextDollyLevel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""726cdbd5-fbfb-4847-86be-66437a559773"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Dodge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""3f34221f-4c87-4a89-b678-a1dad4e0f42f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""db1a771a-f189-4c3b-a830-4bfa11f26157"",
                    ""path"": ""<Keyboard>/#(W)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""a49b24f5-a406-43ab-8078-e1e74b9f0a7a"",
                    ""path"": ""<Keyboard>/#(S)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""5a2d7335-88b4-4acf-b8cf-1838f2f5dd85"",
                    ""path"": ""<Keyboard>/#(A)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""c40e2b4e-69e8-4fc0-aa11-1624cf98fbe9"",
                    ""path"": ""<Keyboard>/#(D)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""94fb2ce2-903f-4414-8ad3-225d07ab195a"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""TurnAround"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e68f74b-2b21-411e-8108-ece56750a309"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""LockOnTarget"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1d3dcdfd-26a2-499a-b7d5-b79b37fcb124"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""UnlockTarget"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""72b1b5a1-2e29-4e92-ab47-7b0efc15273a"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""NextTarget"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""66130fb5-57cf-4972-b418-23cdd028af22"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""PrevTarget"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b51776ab-cc10-4869-bd28-847c3754a593"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""PrevTarget"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC"",
            ""bindingGroup"": ""PC"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""NS"",
            ""bindingGroup"": ""NS"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_PitchYawDelta = m_Player.FindAction("PitchYawDelta", throwIfNotFound: true);
        m_Player_NextDollyLevel = m_Player.FindAction("NextDollyLevel", throwIfNotFound: true);
        m_Player_Dodge = m_Player.FindAction("Dodge", throwIfNotFound: true);
        m_Player_Movement = m_Player.FindAction("Movement", throwIfNotFound: true);
        m_Player_TurnAround = m_Player.FindAction("TurnAround", throwIfNotFound: true);
        m_Player_LockOnTarget = m_Player.FindAction("LockOnTarget", throwIfNotFound: true);
        m_Player_UnlockTarget = m_Player.FindAction("UnlockTarget", throwIfNotFound: true);
        m_Player_NextTarget = m_Player.FindAction("NextTarget", throwIfNotFound: true);
        m_Player_PrevTarget = m_Player.FindAction("PrevTarget", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_PitchYawDelta;
    private readonly InputAction m_Player_NextDollyLevel;
    private readonly InputAction m_Player_Dodge;
    private readonly InputAction m_Player_Movement;
    private readonly InputAction m_Player_TurnAround;
    private readonly InputAction m_Player_LockOnTarget;
    private readonly InputAction m_Player_UnlockTarget;
    private readonly InputAction m_Player_NextTarget;
    private readonly InputAction m_Player_PrevTarget;
    public struct PlayerActions
    {
        private @MainControl m_Wrapper;
        public PlayerActions(@MainControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @PitchYawDelta => m_Wrapper.m_Player_PitchYawDelta;
        public InputAction @NextDollyLevel => m_Wrapper.m_Player_NextDollyLevel;
        public InputAction @Dodge => m_Wrapper.m_Player_Dodge;
        public InputAction @Movement => m_Wrapper.m_Player_Movement;
        public InputAction @TurnAround => m_Wrapper.m_Player_TurnAround;
        public InputAction @LockOnTarget => m_Wrapper.m_Player_LockOnTarget;
        public InputAction @UnlockTarget => m_Wrapper.m_Player_UnlockTarget;
        public InputAction @NextTarget => m_Wrapper.m_Player_NextTarget;
        public InputAction @PrevTarget => m_Wrapper.m_Player_PrevTarget;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @PitchYawDelta.started += instance.OnPitchYawDelta;
            @PitchYawDelta.performed += instance.OnPitchYawDelta;
            @PitchYawDelta.canceled += instance.OnPitchYawDelta;
            @NextDollyLevel.started += instance.OnNextDollyLevel;
            @NextDollyLevel.performed += instance.OnNextDollyLevel;
            @NextDollyLevel.canceled += instance.OnNextDollyLevel;
            @Dodge.started += instance.OnDodge;
            @Dodge.performed += instance.OnDodge;
            @Dodge.canceled += instance.OnDodge;
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @TurnAround.started += instance.OnTurnAround;
            @TurnAround.performed += instance.OnTurnAround;
            @TurnAround.canceled += instance.OnTurnAround;
            @LockOnTarget.started += instance.OnLockOnTarget;
            @LockOnTarget.performed += instance.OnLockOnTarget;
            @LockOnTarget.canceled += instance.OnLockOnTarget;
            @UnlockTarget.started += instance.OnUnlockTarget;
            @UnlockTarget.performed += instance.OnUnlockTarget;
            @UnlockTarget.canceled += instance.OnUnlockTarget;
            @NextTarget.started += instance.OnNextTarget;
            @NextTarget.performed += instance.OnNextTarget;
            @NextTarget.canceled += instance.OnNextTarget;
            @PrevTarget.started += instance.OnPrevTarget;
            @PrevTarget.performed += instance.OnPrevTarget;
            @PrevTarget.canceled += instance.OnPrevTarget;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @PitchYawDelta.started -= instance.OnPitchYawDelta;
            @PitchYawDelta.performed -= instance.OnPitchYawDelta;
            @PitchYawDelta.canceled -= instance.OnPitchYawDelta;
            @NextDollyLevel.started -= instance.OnNextDollyLevel;
            @NextDollyLevel.performed -= instance.OnNextDollyLevel;
            @NextDollyLevel.canceled -= instance.OnNextDollyLevel;
            @Dodge.started -= instance.OnDodge;
            @Dodge.performed -= instance.OnDodge;
            @Dodge.canceled -= instance.OnDodge;
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @TurnAround.started -= instance.OnTurnAround;
            @TurnAround.performed -= instance.OnTurnAround;
            @TurnAround.canceled -= instance.OnTurnAround;
            @LockOnTarget.started -= instance.OnLockOnTarget;
            @LockOnTarget.performed -= instance.OnLockOnTarget;
            @LockOnTarget.canceled -= instance.OnLockOnTarget;
            @UnlockTarget.started -= instance.OnUnlockTarget;
            @UnlockTarget.performed -= instance.OnUnlockTarget;
            @UnlockTarget.canceled -= instance.OnUnlockTarget;
            @NextTarget.started -= instance.OnNextTarget;
            @NextTarget.performed -= instance.OnNextTarget;
            @NextTarget.canceled -= instance.OnNextTarget;
            @PrevTarget.started -= instance.OnPrevTarget;
            @PrevTarget.performed -= instance.OnPrevTarget;
            @PrevTarget.canceled -= instance.OnPrevTarget;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    private int m_PCSchemeIndex = -1;
    public InputControlScheme PCScheme
    {
        get
        {
            if (m_PCSchemeIndex == -1) m_PCSchemeIndex = asset.FindControlSchemeIndex("PC");
            return asset.controlSchemes[m_PCSchemeIndex];
        }
    }
    private int m_NSSchemeIndex = -1;
    public InputControlScheme NSScheme
    {
        get
        {
            if (m_NSSchemeIndex == -1) m_NSSchemeIndex = asset.FindControlSchemeIndex("NS");
            return asset.controlSchemes[m_NSSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnPitchYawDelta(InputAction.CallbackContext context);
        void OnNextDollyLevel(InputAction.CallbackContext context);
        void OnDodge(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
        void OnTurnAround(InputAction.CallbackContext context);
        void OnLockOnTarget(InputAction.CallbackContext context);
        void OnUnlockTarget(InputAction.CallbackContext context);
        void OnNextTarget(InputAction.CallbackContext context);
        void OnPrevTarget(InputAction.CallbackContext context);
    }
}
